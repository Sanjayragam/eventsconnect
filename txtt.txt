server udp------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
 
void main(int argc, char **argv){
  if(argc != 2){
    printf("Usage: %s <port>\n", argv[0]);
    exit(0);
  }
 
  int port = atoi(argv[1]);
  int sockfd;
  struct sockaddr_in si_me, si_other;
  char buffer[1024];
  socklen_t addr_size;
 
  sockfd = socket(AF_INET, SOCK_DGRAM, 0);
 
  memset(&si_me, '\0', sizeof(si_me));
  si_me.sin_family = AF_INET;
  si_me.sin_port = htons(port);
  si_me.sin_addr.s_addr = inet_addr("127.0.0.1");
 
  bind(sockfd, (struct sockaddr*)&si_me, sizeof(si_me));
  addr_size = sizeof(si_other);
  recvfrom(sockfd, buffer, 1024, 0, (struct sockaddr*)& si_other, &addr_size);
  printf("[+]Data Received: %s", buffer);
 
}
client udp--------------------------------------------------------------------------------------------------


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
 
void main(int argc, char **argv){
  if(argc != 2){
    printf("Usage: %s <port>\n", argv[0]);
    exit(0);
  }
 
  int port = atoi(argv[1]);
  int sockfd;
  struct sockaddr_in serverAddr;
  char buffer[1024];
  socklen_t addr_size;
 
  sockfd = socket(PF_INET, SOCK_DGRAM, 0);
  memset(&serverAddr, '\0', sizeof(serverAddr));
 
  serverAddr.sin_family = AF_INET;
  serverAddr.sin_port = htons(port);
  serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");
 
  strcpy(buffer, "Hello Server\n");
  sendto(sockfd, buffer, 1024, 0, (struct sockaddr*)&serverAddr, sizeof(serverAddr));
  printf("[+]Data Send: %s", buffer);
 
}




ospf------------------------------------------------------------------------------------------------------------------------------------
#include <stdio.h>
 
#include <string.h>
 
int main() {
  int count, src_router, i, j, k, w, v, min;
  int cost_matrix[100][100], dist[100], last[100];
  int flag[100];
  printf("\n Enter the no of routers");
  scanf("%d", & count);
  printf("\n Enter the cost matrix values:");
  for (i = 0; i < count; i++) {
    for (j = 0; j < count; j++) {
      printf("\n%d->%d:", i, j);
      scanf("%d", & cost_matrix[i][j]);
      if (cost_matrix[i][j] < 0) cost_matrix[i][j] = 1000;
    }
  }
  printf("\n Enter the source router:");
  scanf("%d", & src_router);
  for (v = 0; v < count; v++) {
    flag[v] = 0;
    last[v] = src_router;
    dist[v] = cost_matrix[src_router][v];
  }
  flag[src_router] = 1;
  for (i = 0; i < count; i++) {
    min = 1000;
    for (w = 0; w < count; w++) {
      if (!flag[w])
        if (dist[w] < min) {
          v = w;
          min = dist[w];
        }
    }
    flag[v] = 1;
    for (w = 0; w < count; w++) {
      if (!flag[w])
        if (min + cost_matrix[v][w] < dist[w]) {
          dist[w] = min + cost_matrix[v][w];
          last[w] = v;
        }
    }
  }
  for (i = 0; i < count; i++) {
    printf("\n%d==>%d:Path taken:%d", src_router, i, i);
    w = i;
    while (w != src_router) {
      printf("\n<--%d", last[w]);
      w = last[w];
    }
    printf("\n Shortest path cost:%d", dist[i]);
  }
}






Enter the no of routers3
Enter the cost matrix values:
0->0:
[exam47@cselinux ~]$ ./a.out
Enter the no of routers2
Enter the cost matrix values:
0->0:3
0->1:4
1->0:5
1->1:6
Enter the source router:1
1==>0:Path taken:0
<--1
Shortest path cost:5
1==>1:Path taken:1
Shortest path cost:6


ftp---------------------------------------------------------------------------------------------------------------------------------------------------


#include<string.h>


#include<sys/ioctl.h>


#include<arpa/inet.h>


#include<stdlib.h>


#include<stdio.h>


#include<net/if_arp.h>


.int main() {
  int sd, b, cd;
  struct fname[50], op[1000];
  struct sockaddr_in caddr, saddr;
  FILE * fp;
  socklen_t clen = sizeof(caddr);
  sd = socket(AF_INET, SOCK_STREAM, 0);
  if (sd != -1)
    printf(“socket is created”);
  else
    printf(“socket is not created”);
  saddr.sin_family = AF_INET;
  saddr.sin_port = htons(2500);
  saddr.sin_addr.s_addr = htonl(INADDR_ANY);
  b = bind(sd, (struct sockaddr * ) & saddr, sizeof(saddr));
  if (b == 0)
    printf(“binded successfully”);
  else
    printf(“binding failed’);
  listen(sd, 5);
  cd = accept(sd, (struct sockaddr * ) & caddr, & clen);
  recv(cd, fname, sizeof(fnmae), 0);
  fp = open(fname, ”w”);
  fwrite(op, strlen(op), 1, fp);
  printf(“the file has been transferred”);
  close(fd);
  close(cd);
  fclose(fp);
  return 0;
}
Client Side Program: #include<string.h>


  #include<sys/ioctl.h>


  #include<arpa/inet.h>


  #include<stdlib.h>


  #include<stdio.h>


  #include<net/if_arp.h>


  #include<sys/types.h>


  #include<sys/socket.h>


  #include<netinet/in.h>


  #include<netdb,h>


  int main() {
    int sd, c, s;
    char fname[50], sip[25], op[1000];
    struct sockaddr_in caddr;
    struct hostent * he;
    FILE * fp;
    printf(‘enter the server ip address”);
    scanf(“ % s”, sip);
    he = gethostbyname(sip0; sd = socket(AF_INET, SOCK_STREAM, 0);
      if (sd != 1)
        printf(“socket created”);
      else
        printf(“socket is not created’); caddr.sin_family = AF_INET; caddr.sin_port = htons(2500); caddr.sin_addr = * ((struct in_addr * ) he -> h_addr); c = connect(sd, (struct sockaddr * ) & caddr, sizeof(caddr));
      if (c == 0)
        printf(“connected to server”);
      else
        printf(“connection failed”); printf(“enter the file name’); scanf(“ % s”, fname); send(sd, fname, sizeof(fname), 0); fp = fopen(fname, ”r”); fopen(op, 1000, 1, fp); send(sd, op, sizeof(op), 0); fclose(fp); close(sd);
      return 0;
    }